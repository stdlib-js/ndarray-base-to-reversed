{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport emptyLike from '@stdlib/ndarray-base-empty-like';\nimport reverse from '@stdlib/ndarray-base-reverse';\nimport assign from '@stdlib/ndarray-base-assign';\n\n\n// MAIN //\n\n/**\n* Returns a new ndarray where the order of elements of an input ndarray is reversed along each dimension.\n*\n* @param {ndarray} x - input array\n* @returns {ndarray} output array\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = toReversed( x );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 3, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 6.0, 5.0 ], [ 4.0, 3.0 ], [ 2.0, 1.0 ] ]\n*/\nfunction toReversed( x ) {\n\tvar out;\n\tvar xr;\n\n\t// Create a reversed view of the input ndarray:\n\txr = reverse( x, false );\n\n\t// Create an output ndarray with the same shape and data type as the input ndarray:\n\tout = emptyLike( x );\n\n\t// Assign the elements of the reversed input ndarray view to the output ndarray:\n\tassign( [ xr, out ] );\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toReversed;\n"],"names":["toReversed","x","out","xr","reverse","emptyLike","assign"],"mappings":";;+RA8DA,SAASA,EAAYC,GACpB,IAAIC,EACAC,EAWJ,OARAA,EAAKC,EAASH,GAAG,GAGjBC,EAAMG,EAAWJ,GAGjBK,EAAQ,CAAEH,EAAID,IAEPA,CACR"}